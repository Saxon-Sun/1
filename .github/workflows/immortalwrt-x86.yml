name: immortalwrt-x86

on:
  schedule:
    - cron: '0 0 1 * *'  # 每月1日 UTC 0:00 (中国时间 08:00)
  workflow_dispatch:
    inputs:
      ssh:
        description: 'Enable SSH connection to Actions'
        required: false
        default: 'false'

env:
  TARGET_Name: immortalwrt-x86
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Maximize Build Space
      uses: coder-xiaomo/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Initialize Build Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo timedatectl set-timezone Asia/Shanghai
        df -h

    - name: Clone Source Code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        git clone --depth 1 https://Saxon-Sun:${{ secrets.pw }}@github.com/Saxon-Sun/Route-config-Files.git
        df -hT $PWD

    - name: Configure Feeds
      run: |
        cd openwrt
        cp -r Route-config-Files/$TARGET_Name/* .
        chmod +x Route-config-Files/diy/*.sh
        mv Route-config-Files/diy/*.sh .
        ./Add-Source.sh
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Apply Custom Configuration
      run: |
        cd openwrt
        cp -r Route-config-Files/public/* files/etc/
        ./diy-x86.sh
        mv Route-config-Files/$TARGET_Name/.config .
        make defconfig

    - name: Enable SSH (Optional)
      if: github.event.inputs.ssh == 'true'
      uses: Saxon-Sun/ssh2actions@main
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download Dependencies
      run: |
        cd openwrt
        make download -j$(nproc)

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        if ! make -j$(nproc); then
            echo "❌ 编译失败，开始详细分析..."
            
            # 磁盘使用分析
            echo "=== 磁盘使用分析 ==="
            df -h .
            echo ""
            
            # 构建目录分析
            echo "=== 构建目录分析 ==="
            if [ -d "build_dir" ]; then
                echo "总构建目录大小:"
                du -sh build_dir || true
                echo ""
                
                echo "各子目录大小:"
                du -sh build_dir/* 2>/dev/null | sort -hr | head -10 || true
                echo ""
                
                # 分析具体包的大小
                echo "最大的包目录:"
                for dir in target-x86_64_musl toolchain-x86_64_gcc-13.3.0_musl hostpkg host; do
                    if [ -d "build_dir/$dir" ]; then
                        echo "--- $dir ---"
                        find "build_dir/$dir" -maxdepth 2 -type d -name "[!.]*" -exec du -sh {} \; 2>/dev/null | \
                            sort -hr | head -5 || true
                        echo ""
                    fi
                done
            fi
            
            # 查找编译错误
            echo "=== 编译错误分析 ==="
            find . -name "log*" -o -name "*.log" | head -5 | while read logfile; do
                echo "检查日志文件: $logfile"
                tail -20 "$logfile" 2>/dev/null | grep -i error || true
            done
            
            # 尝试获取最后错误
            echo "最后的错误信息:"
            make -j1 V=s 2>&1 | tail -50 | grep -i error | head -10 || true
            
            exit 1
        fi
        echo "✅ 编译成功!"
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        #make -j1 V=s
        du -ah ./build_dir/target* | sort -rh | awk 'NR<=20'
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
        ls bin/targets/*/*
        rm -rf $(find ./bin/targets/ -type d -name "packages")
        rm -rf $(find ./bin/targets/ -type f -name "*rootfs*")
        rm -rf build_dir
        df -h
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Prepare Artifacts
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        mkdir -p artifact/{firmware,package}
        find bin/targets/ -type f -exec cp -f {} artifact/firmware/ \;
        find bin/packages/ -type f -name "*.ipk" -exec cp -f {} artifact/package/ \;

    - name: Upload Firmware
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        ./upload.sh $TARGET_Name

    - name: Cleanup Workflow Runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ secrets.pw }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 2
